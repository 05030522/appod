# 미니 프로젝트: 콘솔 기반 연락처 관리 프로그램

# 🎯 프로젝트 목표:
# 사용자의 연락처 정보를 추가, 조회, 수정, 삭제하고, 이 데이터를 파일에 저장하고 불러올 수 있는 간단한 콘솔 애플리케이션을 만드는 것입니다.

# ✨ 학습 내용 통합 시나리오:

# 1. 객체 지향 프로그래밍 (OOP):
# Contact 클래스 정의: 이름, 전화번호, 이메일, 주소 등 연락처 정보를 저장할 수 있는 Contact 클래스를 만드세요.
# __init__ 메서드를 사용하여 연락처 객체가 생성될 때 각 정보를 초기화합니다.
# show_info() 같은 인스턴스 메서드를 만들어 연락처 정보를 보기 좋게 출력하는 기능을 구현할 수 있습니다.
# 필요하다면 상속이나 오버라이딩을 아주 간단하게 적용해볼 수도 있지만, 필수는 아닙니다. (예: FamilyContact 클래스를 Contact에서 상속받아 '관계' 속성 추가 등)

# 2. 자료구조 (리스트 또는 딕셔너리):
# 생성된 Contact 객체들을 저장하고 관리할 리스트(contact_list = [])를 사용하거나, 전화번호 등을 키로 하는 딕셔너리(contact_dict = {})를 사용하여 연락처들을 효율적으로 관리할 수 있습니다.

# 3. 함수:
# 연락처 추가 (add_contact), 조회 (view_contacts 또는 Contacts), 수정 (edit_contact), 삭제 (delete_contact) 기능을 각각의 함수로 구현하세요.
# 사용자 메뉴를 출력하고 입력을 받는 별도의 함수도 만들 수 있습니다.

# 4. 파일 입출력:
# 프로그램을 종료해도 연락처 정보가 사라지지 않도록, 연락처 리스트(또는 딕셔너리)를 파일(예: contacts.txt 또는 contacts.csv)에 저장하고, 프로그램 시작 시 파일에서 연락처 정보를 불러오는 기능을 구현하세요.
# 텍스트 파일의 경우 각 줄에 연락처 정보를 특정 형식으로 저장하거나, CSV 모듈을 사용해보는 것도 좋습니다.

# 5. 예외 처리:
# 파일을 불러올 때 파일이 없는 경우 (FileNotFoundError)나, 사용자 입력이 올바르지 않은 경우 등에 대해 try-except 구문을 사용하여 예외 처리를 적용해보세요.

# 6. 조건문과 반복문:
# 사용자 메뉴 선택, 검색 조건, 반복적인 연락처 처리 등에 if/elif/else와 while/for 반복문을 적극적으로 활용하게 될 겁니다.

